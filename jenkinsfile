pipeline {
    agent any

    parameters {
        choice(
            name: 'DEPLOY_WITH',
            choices: ['kubectl', 'helm'],
            description: 'Choose deployment method: kubectl or helm'
        )
    }

    environment {
        AWS_REGION = 'us-east-1'
        CLUSTER_NAME = 'siva'
        ECR_REPO = 'my-app'
        ECR_REGISTRY = '123456789012.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_TAG = 'latest'
        IMAGE_NAME = "${ECR_REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git 'https://github.com/BhaskaraReddy123/paytm.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME .'
            }
        }

        stage('Scan Image with Trivy') {
            steps {
                sh 'trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME || true'
            }
        }

        stage('Login & Push to ECR') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region $AWS_REGION

                        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
                        docker push $IMAGE_NAME
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh '''
                    aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

                    if [ "$DEPLOY_WITH" = "kubectl" ]; then
                      echo "Deploying using kubectl..."
                      kubectl set image deployment/my-deployment my-container=$IMAGE_NAME --record
                    elif [ "$DEPLOY_WITH" = "helm" ]; then
                      echo "Deploying using Helm..."
                      helm upgrade --install my-app ./Chart \
                        --set image.repository=$ECR_REGISTRY/$ECR_REPO \
                        --set image.tag=$IMAGE_TAG
                    else
                      echo "Invalid DEPLOY_WITH value: $DEPLOY_WITH"
                      exit 1
                    fi
                '''
            }
        }
    }
}
